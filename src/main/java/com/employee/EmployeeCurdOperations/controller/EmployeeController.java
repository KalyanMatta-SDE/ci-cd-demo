package com.employee.EmployeeCurdOperations.controller;import com.employee.EmployeeCurdOperations.customexceptions.UserNotFoundExecption;import com.employee.EmployeeCurdOperations.dto.EmployeeDTO;import com.employee.EmployeeCurdOperations.entity.Employee;import com.employee.EmployeeCurdOperations.service.EmployeeService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import javax.annotation.PreDestroy;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;import java.util.Optional;@RestController@RequestMapping("api/v1/employees")public class EmployeeController {    private final EmployeeService service;    public EmployeeController(EmployeeService service){        System.out.println("The hexcode of service and controller" + this.hashCode() + " : " + service.hashCode());        this.service = service;    }    @GetMapping()    public List<Employee> getAllEmployees(){        return service.allEmployeesList();    }    @GetMapping("/{id}")    public Employee getEmployee(@PathVariable int id) throws UserNotFoundExecption {        System.out.println(service.hashCode());        Optional<Employee> optionalEmployee =                Optional.ofNullable(service.getEmployeeById(id));        if(optionalEmployee.isPresent()){            return optionalEmployee.get();        }else{            throw new UserNotFoundExecption("User Not Found");        }    }    @PostMapping()    public Employee addEmployee(@RequestBody EmployeeDTO employee){        return service.addNewEmployee(employee);    }    @PutMapping("/{id}")    public Employee updateEmployee(@PathVariable int id,                                   @RequestBody EmployeeDTO employee){        return service.updateEmployeeById(id, employee);    }    @DeleteMapping("/{id}")    public Employee deleteEmployee(@PathVariable int id){        return service.deleteEmployee(id);    }    @PatchMapping("/{id}")    public Employee updateDetails(@PathVariable int id,                                  @RequestBody EmployeeDTO employeeDTO){        return service.updateDetails(id, employeeDTO);    }    @PreDestroy    public void cleanup(){        System.out.println("Cleanup things happenig");    }    @GetMapping("/session")    public ResponseEntity logout(HttpServletRequest request,                                 HttpServletResponse response){        System.out.println(request.getRemoteHost());        System.out.println(request.getRemotePort());        request.getSession().invalidate();        return ResponseEntity.status(HttpStatus.OK).body("Session got " +                "invalidated!..");    }}