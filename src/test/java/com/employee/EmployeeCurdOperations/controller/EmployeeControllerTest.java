package com.employee.EmployeeCurdOperations.controller;import com.employee.EmployeeCurdOperations.entity.Employee;import com.employee.EmployeeCurdOperations.service.EmployeeService;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.util.List;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@SpringBootTest@AutoConfigureMockMvcpublic class EmployeeControllerTest {    @Autowired    private MockMvc mockMvc;    @MockBean    private EmployeeService employeeService;    private Employee employee;    @BeforeEach    void setUp() {        employee = new Employee(1, "Kalyan", 23, 50000);    }    @AfterEach    void tearDown() {        employee = null;    }    @Test    void testPostProduct() throws Exception {        when(employeeService.addNewEmployee(any())).thenReturn(employee);        mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/employees")                        .contentType(MediaType.APPLICATION_JSON)                        .content(asJsonString(employee)))                .andExpect(status().isOk());        verify(employeeService).addNewEmployee(any());    }    // Helper method to convert Java objects to JSON    private static String asJsonString(final Object obj) {        try {            return new com.fasterxml.jackson.databind.ObjectMapper().writeValueAsString(obj);        } catch (Exception e) {            throw new RuntimeException(e);        }    }}